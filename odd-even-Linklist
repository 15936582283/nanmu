//给定一个单链表，把所有的奇数节点和偶数节点分别排在一起。请注意，这里的奇数节点和偶数节点指的是节点编号的奇偶性，而不是节点的值的奇偶性。
//请尝试使用原地算法完成
//输入: 1->2->3->4->5->NULL
//输出: 1->3->5->2->4->NULL
//输入: 2->1->3->5->6->4->7->NULL 
//输出: 2->3->6->7->1->5->4->NULL

#include<iostream>
#include<string>
//#include<vec>
using namespace std;
typedef struct LNode {                //结构体
	int date;
	char c1;
	char c2;
	struct LNode *next;
}LNode ,*LinkList;
int InitList(LinkList &L) {             // 链表
	L = new LNode;
	L->next = NULL;
	return 1;
}
int CreateList_R(LinkList &L) {        //创建单链表
	L = new LNode;
	L->next = NULL;
	LinkList r = L;
	int count = 0;          // 计数；
	for ( ; ; )
	{
		char c;
		cin >> c;
		if (c == 'N') break;          // null 结束
		if (!isdigit(c))continue;    // 非数字执行跳过
		LinkList p = new LNode;
		p->date = (int)(c - '0');
		p->next = NULL;
		r->next = p;
		r = p;
		count++;
	}
	return count;
}
int GetELem(LinkList L, int i) {       // 取值
	int date = 0;
	LinkList p = L->next;
	int j = 1;
	while (p && j < i) {
		p = p->next;
		++j;
	}
	if (!p || j>i) return -1;
	date = p->date;
	return date;
}
int ListInster(LinkList &L, int i, int e) {      // 插入
	LinkList p = L; 
	int j = 0;
	while (p && (j < i - 1))
	{
		p = p->next;
		++j;
	}
	if (!p || j > i - 1) return -1;
	LinkList s = new LNode;
	s->date = e;
	s->next = p->next;
	p->next = s;
	return 1;
}
int ListDelete(LinkList &L, int i) {            // 删除
	LinkList p = L;
	int j = 0;
	while ((p->next) && (j < i - 1)) {
		p = p->next;
		++j;
	}
	if (!(p->next) || (j > i - 1)) return -1;
	LinkList q = p->next;
	p->next = q->next;
	delete q;
	return 1;
}
int main() {
	LinkList L;
	int count = CreateList_R(L);
	//cout << count << endl;
	int c = 1;
	for (int i = 3; i <= count; i = i+2)
	{
		int t = GetELem(L, i);      // 取值
		int t2 = 0;
		t2 = ListInster(L, i - c, t);    // 插入
		int t3 = 0;
		if (t2 == 1) t3 = ListDelete(L, i + 1);   // 删除
		c++;
	}
	for (int i = 1; i <= count; i++)
	{
		cout << GetELem(L, i) << "->";
	}
	cout << "NULL" << endl;
	//cin >> count;
	return 0;
}


